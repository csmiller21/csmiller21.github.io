[
  {
    "name": "AudioTrackController#onAudioTrackLoaded",
    "filePath": "src/controller/audio-track-controller.js",
    "lines": [
      {
        "lineNumber": 87,
        "line": "  /**"
      },
      {
        "lineNumber": 88,
        "line": "   * Store track details of loaded track in our data-model."
      },
      {
        "lineNumber": 89,
        "line": "   *"
      },
      {
        "lineNumber": 90,
        "line": "   * Set-up metadata update interval task for live-mode streams."
      },
      {
        "lineNumber": 91,
        "line": "   *"
      },
      {
        "lineNumber": 92,
        "line": "   * @param {} data"
      },
      {
        "lineNumber": 93,
        "line": "   */"
      },
      {
        "lineNumber": 94,
        "line": "  onAudioTrackLoaded (data) {"
      }
    ],
    "codeParams": [
      "data"
    ],
    "docParams": []
  },
  {
    "name": "fragmentWithinToleranceTest",
    "filePath": "src/controller/fragment-finders.js",
    "lines": [
      {
        "lineNumber": 83,
        "line": "/**"
      },
      {
        "lineNumber": 84,
        "line": " * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions."
      },
      {
        "lineNumber": 85,
        "line": " * @param {*} candidate - The fragment to test"
      },
      {
        "lineNumber": 86,
        "line": " * @param {number} [bufferEnd = 0] - The end of the current buffered range the playhead is currently within"
      },
      {
        "lineNumber": 87,
        "line": " * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous"
      },
      {
        "lineNumber": 88,
        "line": " * @returns {number} - 0 if it matches, 1 if too low, -1 if too high"
      },
      {
        "lineNumber": 89,
        "line": " */"
      },
      {
        "lineNumber": 90,
        "line": "export function fragmentWithinToleranceTest (bufferEnd = 0, maxFragLookUpTolerance = 0, candidate) {"
      }
    ],
    "codeParams": [
      "bufferEnd",
      "maxFragLookUpTolerance",
      "candidate"
    ],
    "docParams": [
      "candidate",
      "bufferEnd",
      "maxFragLookUpTolerance"
    ]
  },
  {
    "name": "ExpGolomb#readSPS",
    "filePath": "src/demux/exp-golomb.js",
    "lines": [
      {
        "lineNumber": 162,
        "line": "  /**"
      },
      {
        "lineNumber": 163,
        "line": "   * Read a sequence parameter set and return some interesting video"
      },
      {
        "lineNumber": 164,
        "line": "   * properties. A sequence parameter set is the H264 metadata that"
      },
      {
        "lineNumber": 165,
        "line": "   * describes the properties of upcoming video frames."
      },
      {
        "lineNumber": 166,
        "line": "   * @param data {Uint8Array} the bytes of a sequence parameter set"
      },
      {
        "lineNumber": 167,
        "line": "   * @return {object} an object with configuration parsed from the"
      },
      {
        "lineNumber": 168,
        "line": "   * sequence parameter set, including the dimensions of the"
      },
      {
        "lineNumber": 169,
        "line": "   * associated video frames."
      },
      {
        "lineNumber": 170,
        "line": "   */"
      },
      {
        "lineNumber": 171,
        "line": "  readSPS () {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "MP4Demuxer.parseInitSegment",
    "filePath": "src/demux/mp4demuxer.js",
    "lines": [
      {
        "lineNumber": 235,
        "line": "  /**"
      },
      {
        "lineNumber": 236,
        "line": "   * Parses an MP4 initialization segment and extracts stream type and"
      },
      {
        "lineNumber": 237,
        "line": "   * timescale values for any declared tracks. Timescale values indicate the"
      },
      {
        "lineNumber": 238,
        "line": "   * number of clock ticks per second to assume for time-based values"
      },
      {
        "lineNumber": 239,
        "line": "   * elsewhere in the MP4."
      },
      {
        "lineNumber": 240,
        "line": "   *"
      },
      {
        "lineNumber": 241,
        "line": "   * To determine the start time of an MP4, you need two pieces of"
      },
      {
        "lineNumber": 242,
        "line": "   * information: the timescale unit and the earliest base media decode"
      },
      {
        "lineNumber": 243,
        "line": "   * time. Multiple timescales can be specified within an MP4 but the"
      },
      {
        "lineNumber": 244,
        "line": "   * base media decode time is always expressed in the timescale from"
      },
      {
        "lineNumber": 245,
        "line": "   * the media header box for the track:"
      },
      {
        "lineNumber": 246,
        "line": "   * ```"
      },
      {
        "lineNumber": 247,
        "line": "   * moov > trak > mdia > mdhd.timescale"
      },
      {
        "lineNumber": 248,
        "line": "   * moov > trak > mdia > hdlr"
      },
      {
        "lineNumber": 249,
        "line": "   * ```"
      },
      {
        "lineNumber": 250,
        "line": "   * @param init {Uint8Array} the bytes of the init segment"
      },
      {
        "lineNumber": 251,
        "line": "   * @return {object} a hash of track type to timescale values or null if"
      },
      {
        "lineNumber": 252,
        "line": "   * the init segment is malformed."
      },
      {
        "lineNumber": 253,
        "line": "   */"
      },
      {
        "lineNumber": 254,
        "line": "  static parseInitSegment (initSegment) {"
      }
    ],
    "codeParams": [
      "initSegment"
    ],
    "docParams": [
      "init"
    ]
  },
  {
    "name": "MP4Demuxer.getStartDTS",
    "filePath": "src/demux/mp4demuxer.js",
    "lines": [
      {
        "lineNumber": 293,
        "line": "  /**"
      },
      {
        "lineNumber": 294,
        "line": " * Determine the base media decode start time, in seconds, for an MP4"
      },
      {
        "lineNumber": 295,
        "line": " * fragment. If multiple fragments are specified, the earliest time is"
      },
      {
        "lineNumber": 296,
        "line": " * returned."
      },
      {
        "lineNumber": 297,
        "line": " *"
      },
      {
        "lineNumber": 298,
        "line": " * The base media decode time can be parsed from track fragment"
      },
      {
        "lineNumber": 299,
        "line": " * metadata:"
      },
      {
        "lineNumber": 300,
        "line": " * ```"
      },
      {
        "lineNumber": 301,
        "line": " * moof > traf > tfdt.baseMediaDecodeTime"
      },
      {
        "lineNumber": 302,
        "line": " * ```"
      },
      {
        "lineNumber": 303,
        "line": " * It requires the timescale value from the mdhd to interpret."
      },
      {
        "lineNumber": 304,
        "line": " *"
      },
      {
        "lineNumber": 305,
        "line": " * @param timescale {object} a hash of track ids to timescale values."
      },
      {
        "lineNumber": 306,
        "line": " * @return {number} the earliest base media decode start time for the"
      },
      {
        "lineNumber": 307,
        "line": " * fragment, in seconds"
      },
      {
        "lineNumber": 308,
        "line": " */"
      },
      {
        "lineNumber": 309,
        "line": "  static getStartDTS (initData, fragment) {"
      }
    ],
    "codeParams": [
      "initData",
      "fragment"
    ],
    "docParams": [
      "timescale"
    ]
  },
  {
    "name": "MP4.moov",
    "filePath": "src/remux/mp4-generator.js",
    "lines": [
      {
        "lineNumber": 232,
        "line": "  /**"
      },
      {
        "lineNumber": 233,
        "line": " * @param tracks... (optional) {array} the tracks associated with this movie"
      },
      {
        "lineNumber": 234,
        "line": " */"
      },
      {
        "lineNumber": 235,
        "line": "  static moov (tracks) {"
      }
    ],
    "codeParams": [
      "tracks"
    ],
    "docParams": []
  }
]